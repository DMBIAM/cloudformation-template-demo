AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template for the given AWS architecture"

Parameters:
  VpcId:
    Type: String
    Description: "The VPC ID where the resources will be deployed"
  SubnetId:
    Type: String
    Description: "The Subnet ID where the Lambdas will be deployed"
  TagKey:
    Type: String
    Description: "Tag key for resources"
    Default: "lm_troux_uid"
  TagValue:
    Type: String
    Description: "Tag value for resources"
    Default: "123"

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3demo
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource: 
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - !Sub "arn:aws:s3:::${S3Bucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Principal:
              AWS: 
                - !GetAtt LambdaExecutionRole.Arn
                - !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Access identity for CloudFront to access S3"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: allow-all
          ForwardedValues:
            QueryString: false
        DefaultRootObject: index.html
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: productos
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: N
        - AttributeName: Nombre
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Nombre
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  DynamoDBSeedData:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SeedDynamoDB
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              dynamodb = boto3.client('dynamodb')
              table_name = 'productos'
              items = [
                  {"Id": {"N": "1"}, "Nombre": {"S": "Tomate"}, "Cantidad": {"N": "10"}},
                  {"Id": {"N": "2"}, "Nombre": {"S": "Cebolla"}, "Cantidad": {"N": "5"}}
              ]
              for item in items:
                  dynamodb.put_item(TableName=table_name, Item=item)
              return {"statusCode": 200, "body": "Data inserted successfully"}
      VpcConfig:
        SubnetIds:
          - !Ref SubnetId
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ListarS3Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: listarS3
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetId
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ListarDynamoLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: listarDynamo
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref SubnetId
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: APIGatewayDemo
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  GetProductsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListarDynamoLambda.Arn}/invocations"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ListS3ObjectsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListarS3Lambda.Arn}/invocations"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: DemoApiKey
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: prod
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  UploadIndexHtmlLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: uploadIndexHtml
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = event['bucket_name']
              index_html_content = """
              <html>
              <head><title>Welcome</title></head>
              <body><h1>Welcome to CloudFront!</h1></body>
              </html>
              """
              s3.put_object(Bucket=bucket_name, Key='index.html', Body=index_html_content, ContentType='text/html')
              return {"statusCode": 200, "body": "index.html uploaded successfully"}
      VpcConfig:
        SubnetIds:
          - !Ref SubnetId
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  UploadIndexHtmlCustomResource:
    Type: Custom::UploadIndexHtml
    Properties:
      ServiceToken: !GetAtt UploadIndexHtmlLambda.Arn
      bucket_name: !Ref S3Bucket

Outputs:
  CloudFrontURL:
    Description: "The CloudFront distribution URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
